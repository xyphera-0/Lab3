////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project 
//** NAME: Gizelle Ojeda-Ericksen
//** RIN: 662065015
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

// We'll always add this include statement. This basically takes the
// code contained within the "engr_2350_msp432.h" file and adds it here.
#include "engr2350_msp432.h"

// Add function prototypes here as needed.
void GPIO_Init();
void Timer_Init();
void Encoder_ISR();


// Add global variables here as needed.
Timer_A_ContinuousModeConfig config;
Timer_A_CaptureModeConfig ccr;
//Timer_A_CompareModeConfig compare;

uint32_t enc_total; //Keep track of total encoder events, useful in measuring distance traveled.
int32_t enc_counts_track; // Keep track the timer counts since the capture event (must be signed!).
int32_t enc_counts; // Final value of timer counts between capture events.
uint8_t enc_flag = 0;// A flag to denote that a capture event has occurred.


int main( void ) {    /** Main Function ****/
  
    // Add local variables here as needed.

    // We always call the SysInit function first to set up the 
    // microcontroller for how we are going to use it.
    SysInit();
    GPIO_Init();
    Timer_Init();

    // Place initialization code (or run-once) code here
    printf("Activity 10 part 2 \r\n");
    while( 1 ) {
//        printf("entered while\r\n");
        // Place code that runs continuously in here
        if(enc_flag){ // Check to see if capture occurred
            enc_flag = 0; // reset capture flag
            uint16_t distance = (enc_total * 220)/360 ; // Calculate distance travelled in mm
            uint16_t speed_rpm = (1/360)*(1/enc_counts)*(60/1) ; // Calculate the instantaneous wheel speed in rpm
            uint16_t speed_mm =((2*3.15)/360)*(1/enc_counts)*(35) ; // Calculate the instantaneous car speed in mm/s
            printf("%5u mm\t%5u rpm\t%5u mm/s\r\n",distance,speed_rpm,speed_mm);
        }
    }   
}    /** End Main Function ****/   

// Add function declarations here as needed
void GPIO_Init() {
    //10.4 right wheel encoder
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P10, GPIO_PIN4, GPIO_PRIMARY_MODULE_FUNCTION);
    //10.5 left wheel encoder
   // GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P10, GPIO_PIN5, GPIO_PRIMARY_MODULE_FUNCTION);

}
void Timer_Init() {
    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    config.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_ENABLE;
    config.timerClear = TIMER_A_DO_CLEAR;
    Timer_A_configureContinuousMode(TIMER_A3_BASE, &config);

    ccr.captureRegister = TIMER_A_CAPTURECOMPARE_REGISTER_0;
    ccr.captureMode = TIMER_A_CAPTUREMODE_RISING_EDGE;
    ccr.captureInputSelect = TIMER_A_CAPTURE_INPUTSELECT_CCIxA;
    ccr.synchronizeCaptureSource = TIMER_A_CAPTURE_SYNCHRONOUS;
    ccr.captureInterruptEnable = TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE;
    Timer_A_initCapture(TIMER_A3_BASE, &ccr);

    Timer_A_registerInterrupt(TIMER_A3_BASE, TIMER_A_CCR0_INTERRUPT, Encoder_ISR);
    Timer_A_registerInterrupt(TIMER_A3_BASE, TIMER_A_CCRX_AND_OVERFLOW_INTERRUPT,Encoder_ISR);

    Timer_A_startCounter(TIMER_A3_BASE, TIMER_A_CONTINUOUS_MODE);


}
 void Encoder_ISR() {
//     compare.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_0;
     if(Timer_A_getEnabledInterruptStatus( TIMER_A3_BASE ) & TIMER_A_INTERRUPT_PENDING) {
         Timer_A_clearInterruptFlag(TIMER_A3_BASE);
         enc_counts_track += 65536;
     }
     if (Timer_A_getCaptureCompareEnabledInterruptStatus(TIMER_A3_BASE,TIMER_A_CAPTURECOMPARE_REGISTER_0) & TIMER_A_CAPTURECOMPARE_INTERRUPT_FLAG) {
         Timer_A_clearCaptureCompareInterrupt(TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0);
         enc_total +=1;
         enc_counts = enc_counts_track + Timer_A_getCaptureCompareCount(TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0);
         enc_counts_track = -(Timer_A_getCaptureCompareCount(TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0));
         enc_flag = 1;
     }
 }

// Add interrupt functions last so they are easy to find
