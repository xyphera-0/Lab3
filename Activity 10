////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project 
//** NAME: Xiomara Pelaez Cuacua
//** RIN: 662068537
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

// We'll always add this include statement. This basically takes the
// code contained within the "engr_2350_msp432.h" file and adds it here.
#include "engr2350_msp432.h"

// Add function prototypes here as needed.
void GPIO_Init();
void Timer_Init();

// Add global variables here as needed.
Timer_A_UpModeConfig config;
Timer_A_CompareModeConfig compareRight;
Timer_A_CompareModeConfig compareLeft;

int rightCompare = 0;
int leftCompare = 0;

int main( void ) {    /** Main Function ****/

    // Add local variables here as needed.

    // We always call the SysInit function first to set up the
    // microcontroller for how we are going to use it.
    SysInit();
    GPIO_Init();
    Timer_Init();
    // Place initialization code (or run-once) code here

    while( 1 ) {

        int maxCompareValue = (int)(0.9 * 2400);

        // Place code that runs continuously in here
        uint8_t cmd = getchar();
        if(cmd == 's'){
            printf("s");
            rightCompare += 100;
            if (rightCompare > maxCompareValue) {
                rightCompare = maxCompareValue;
            }
            compareRight.compareValue = rightCompare;
            Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, rightCompare);
        } else if (cmd == 'x') {
            printf("x");
            rightCompare -= 100;
            if (rightCompare < 0) {
                rightCompare = 0;
            }
            compareRight.compareValue = rightCompare;
            Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, rightCompare);
        }

        if(cmd == 'a'){
            printf("a");
            leftCompare += 100;
            if (leftCompare > maxCompareValue) {
                leftCompare = maxCompareValue;
            }
            compareLeft.compareValue = leftCompare;
            Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_4, leftCompare);
        } else if (cmd == 'z') {
            printf("z");
            leftCompare -= 100;
            if (leftCompare < 0) {
                leftCompare = 0;
            }
            compareLeft.compareValue = leftCompare;
            Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_4, leftCompare);
        }

    }
}    /** End Main Function ****/   

// Add function declarations here as needed
void GPIO_Init(){
    GPIO_setAsOutputPin(GPIO_PORT_P3, GPIO_PIN7); //3.7 left motor on
    GPIO_setAsOutputPin(GPIO_PORT_P3, GPIO_PIN6); //3.6 right motor on
    GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN4); //5.4 left direction
    GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN5); //5.5 right direction

    GPIO_setOutputHighOnPin(GPIO_PORT_P3, GPIO_PIN7);
    GPIO_setOutputHighOnPin(GPIO_PORT_P3, GPIO_PIN6);
    GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN4);
    GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN5);

    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2, GPIO_PIN7, GPIO_PRIMARY_MODULE_FUNCTION); //2.7 Left PWM
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2, GPIO_PIN6, GPIO_PRIMARY_MODULE_FUNCTION); //2.6 Right PWM
}


void Timer_Init(){
    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    config.timerPeriod = 2400; //elapses every 100ms
    Timer_A_configureUpMode(TIMER_A0_BASE, &config);

    compareRight.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_3;
    compareRight.compareInterruptEnable = TIMER_A_CAPTURECOMPARE_INTERRUPT_DISABLE;
    compareRight.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
    compareRight.compareValue = 0;
    Timer_A_initCompare(TIMER_A0_BASE, &compareRight);

    compareLeft.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_4;
    compareLeft.compareInterruptEnable = TIMER_A_CAPTURECOMPARE_INTERRUPT_DISABLE;
    compareLeft.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
    compareLeft.compareValue = 0;
    Timer_A_initCompare(TIMER_A0_BASE, &compareLeft);


    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
}

// Add interrupt functions last so they are easy to find
